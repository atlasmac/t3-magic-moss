generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean?       @default(false)
  accounts      Account[]
  favorites     FavoriteWave[]
  sessions      Session[]
}

model FavoriteWave {
  id       String @id @default(cuid())
  siteId   String
  siteName String
  userId   String
  site     Report @relation(fields: [siteName], references: [siteName])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([siteId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  siteId          String            @unique
  siteName        String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  giph            String?
  favoriteWave    FavoriteWave[]
  forecast        Forecast[]
  latLon          LatLon?
  observation     Observation[]
  range           Range?
  RiverConditions RiverConditions[]
}

model RiverConditions {
  id         String @id @default(cuid())
  siteId     String
  cfs        Int
  condition  String
  reportDesc String
  Report     Report @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@unique([siteId, cfs])
}

model Range {
  bottomRange Int
  topRange    Int
  siteId      String @unique
  report      Report @relation(fields: [siteId], references: [siteId], onDelete: Cascade)
}

model LatLon {
  siteId   String  @unique
  lat      Float
  lon      Float
  location String?
  report   Report  @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@unique([lat, lon])
}

model Observation {
  date   String
  siteId String
  cfs    Float
  ft     Float
  report Report @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@unique([siteId, date, cfs])
}

model Forecast {
  date   String
  siteId String
  cfs    Float
  ft     Float
  report Report @relation(fields: [siteId], references: [siteId], onDelete: Cascade)

  @@unique([siteId, date, cfs])
}
